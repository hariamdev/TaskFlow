---
// TaskList.astro - Main task list component
---

<div 
  class="max-w-2xl mx-auto p-6"
  x-data="taskManager"
  x-init="loadTasks()"
>
  <!-- Header -->
  <div class="text-center mb-8">
    <h1 class="text-3xl font-bold text-gray-800 mb-2">TaskFlow</h1>
    <p class="text-gray-600">Simple and efficient task management</p>
  </div>

  <!-- Task Input Form -->
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
    <form @submit.prevent="addTask()" class="flex flex-col sm:flex-row gap-3">
      <div class="flex-1">
        <input 
          x-model="newTask"
          type="text" 
          placeholder="Enter a new task..."
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
          required
        />
      </div>
      <button 
        type="submit"
        class="px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors font-medium"
      >
        <span class="hidden sm:inline">Add Task</span>
        <svg class="w-5 h-5 sm:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
      </button>
    </form>
  </div>

  <!-- Task Statistics -->
  <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 text-center">
      <div class="text-2xl font-bold text-primary-600" x-text="totalTasks"></div>
      <div class="text-sm text-gray-600">Total Tasks</div>
    </div>
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 text-center">
      <div class="text-2xl font-bold text-success-600" x-text="completedTasks"></div>
      <div class="text-sm text-gray-600">Completed</div>
    </div>
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 text-center">
      <div class="text-2xl font-bold text-warning-600" x-text="pendingTasks"></div>
      <div class="text-sm text-gray-600">Pending</div>
    </div>
  </div>

  <!-- Filter Tabs -->
  <div class="flex flex-wrap gap-2 mb-6">
    <button 
      @click="currentFilter = 'all'"
      :class="currentFilter === 'all' ? 'bg-primary-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'"
      class="px-4 py-2 rounded-lg border border-gray-300 transition-colors font-medium"
    >
      All Tasks
    </button>
    <button 
      @click="currentFilter = 'pending'"
      :class="currentFilter === 'pending' ? 'bg-primary-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'"
      class="px-4 py-2 rounded-lg border border-gray-300 transition-colors font-medium"
    >
      Pending
    </button>
    <button 
      @click="currentFilter = 'completed'"
      :class="currentFilter === 'completed' ? 'bg-primary-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'"
      class="px-4 py-2 rounded-lg border border-gray-300 transition-colors font-medium"
    >
      Completed
    </button>
  </div>

  <!-- Task List -->
  <div class="space-y-3">
    <template x-for="task in filteredTasks" :key="task.id">
      <div 
        class="task-item bg-white p-4 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-all duration-200 animate-slide-up"
        x-data="{ isCompleted: task.completed }"
      >
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-3 flex-1">
            <input 
              type="checkbox" 
              :checked="isCompleted"
              @change="isCompleted = !isCompleted; toggleTask(task.id)"
              class="w-5 h-5 text-primary-600 border-2 border-gray-300 rounded focus:ring-primary-500 focus:ring-2 transition-colors"
            />
            <span 
              :class="isCompleted ? 'line-through text-gray-500' : 'text-gray-800'"
              class="flex-1 text-sm font-medium transition-colors"
              x-text="task.text"
            ></span>
          </div>
          <div class="flex items-center space-x-2">
            <span 
              class="text-xs text-gray-400 hidden sm:block"
              x-text="formatDate(task.createdAt)"
            ></span>
            <button 
              @click="deleteTask(task.id)"
              class="text-error-500 hover:text-error-600 hover:bg-error-50 p-1 rounded transition-colors"
              title="Delete task"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </template>
  </div>

  <!-- Empty State -->
  <div x-show="filteredTasks.length === 0" class="text-center py-12">
    <div class="text-gray-400 mb-4">
      <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
      </svg>
    </div>
    <h3 class="text-lg font-medium text-gray-800 mb-2">No tasks found</h3>
    <p class="text-gray-600" x-text="getEmptyStateMessage()"></p>
  </div>
</div>

<script is:inline>
document.addEventListener('alpine:init', () => {
  Alpine.data('taskManager', () => ({
    tasks: [],
    newTask: '',
    currentFilter: 'all',

    get totalTasks() {
      return this.tasks.length;
    },

    get completedTasks() {
      return this.tasks.filter(task => task.completed).length;
    },

    get pendingTasks() {
      return this.tasks.filter(task => !task.completed).length;
    },

    get filteredTasks() {
      if (this.currentFilter === 'completed') {
        return this.tasks.filter(task => task.completed);
      } else if (this.currentFilter === 'pending') {
        return this.tasks.filter(task => !task.completed);
      }
      return this.tasks;
    },

    addTask() {
      if (this.newTask.trim() === '') return;

      const task = {
        id: Date.now(),
        text: this.newTask.trim(),
        completed: false,
        createdAt: new Date().toISOString()
      };

      this.tasks.unshift(task);
      this.newTask = '';
      this.saveTasks();
    },

    toggleTask(id) {
      const task = this.tasks.find(t => t.id === id);
      if (task) {
        task.completed = !task.completed;
        this.saveTasks();
      }
    },

    deleteTask(id) {
      this.tasks = this.tasks.filter(t => t.id !== id);
      this.saveTasks();
    },

    saveTasks() {
      localStorage.setItem('taskflow-tasks', JSON.stringify(this.tasks));
    },

    loadTasks() {
      const savedTasks = localStorage.getItem('taskflow-tasks');
      if (savedTasks) {
        this.tasks = JSON.parse(savedTasks);
      }
    },

    formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    },

    getEmptyStateMessage() {
      if (this.currentFilter === 'completed') {
        return 'No completed tasks yet. Keep working!';
      } else if (this.currentFilter === 'pending') {
        return 'No pending tasks. Great job!';
      }
      return 'Add your first task to get started.';
    }
  }));
});
</script>